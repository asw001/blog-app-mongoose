const chai = require('chai');
const chaiHttp = require('chai-http');
const faker = require('faker');
const mongoose = require('mongoose');
chai.use(chaiHttp);
const should = chai.should();

const {BlogPost} = require('../models');
const {app, runServer, closeServer} = require('../server');
const {TEST_DATABASE_URL} = require('../config');
const {DATABASE_URL} = require('../config');



// used to generate data to put in db
function generateBlogTitle() {
  const titles = ['Working Moms', 'Celebrities', 'Diets', 'Movies', 'Politics'];
  return titles[Math.floor(Math.random() * titles.length)];
}

// used to generate data to put in db
function generateBlogAuthor() {
  const authors = [{firstName: 'Stan', lastName: 'Walker'}, {firstName: 'Evelyn', lastName: 'Chan'}, {firstName: 'Rob', lastName: 'King'}];
  return authors[Math.floor(Math.random() * authors.length)];
}

// used to generate data to put in db
function generateBlogContent() {
  const content = ['Aaaaa', 'Bbbbb', 'Cccc', 'Ddddd', 'Ffff'];
  return content[Math.floor(Math.random() * content.length)];
}

function generateBlogPostData() {
  return {
    title: generateBlogTitle(),
    author: generateBlogAuthor(),
    content: generateBlogContent(),
  }
}

function seedBlogPostData() {
  console.info('seeding BlogPost data');
  const seedData = [];

  for (let i=1; i<=10; i++) {
    seedData.push(generateBlogPostData());
  }
  // this will return a promise
  return BlogPost.insertMany(seedData);
}

function tearDownDb() {
    console.warn('Deleting database');
    return mongoose.connection.dropDatabase();
}

describe('BlogPosts API resource', function() {

  // we need each of these hook functions to return a promise
  // otherwise we'd need to call a `done` callback. `runServer`,
  // `seedBlogPostData` and `tearDownDb` each return a promise,
  // so we return the value returned by these function calls.
  before(function() {
    return runServer(TEST_DATABASE_URL);
  });

  beforeEach(function() {
    return seedBlogPostData();
  });

  afterEach(function() {
    return tearDownDb();
  });

  after(function() {
    return closeServer();
  })

  // note the use of nested `describe` blocks.
  // this allows us to make clearer, more discrete tests that focus
  // on proving something small
  describe('GET endpoint', function() {

  it('should return all existing posts', function() {
      // strategy:
      //    1. get back all posts returned by by GET request to `/posts`
      //    2. prove res has right status, data type
      //    3. prove the number of posts we got back is equal to number
      //       in db.
      let res;
      return chai.request(app)
        .get('/posts')
        .then(_res => {
          res = _res;
          res.should.have.status(200);
          // otherwise our db seeding didn't work
          res.body.should.have.length.of.at.least(1);

          return BlogPost.count();
        })
        .then(count => {
          // the number of returned posts should be same
          // as number of posts in DB
          res.body.should.have.length.of(count);
        });
});



    it('should return BlogPosts with right fields', function() {
      // Strategy: Get back all BlogPosts, and ensure they have expected keys

      let resposts;
      return chai.request(app)
        .get('/posts')
        .then(function(res) {
          res.should.have.status(200);
          res.should.be.json;
          res.body.posts.should.be.a('array');
          res.body.posts.should.have.length.of.at.least(1);

          res.body.posts.forEach(function(posts) {
            posts.should.be.a('object');
            posts.should.include.keys(
              'id', 'created', 'author', 'content', 'title');
          });
          resposts = res.body.posts[0];
          return BlogPost.findById(resposts.id).exec();
        })
        .then(function(posts) {

          resposts.title.should.equal(posts.title);
          resposts.content.should.equal(posts.content);
          resposts.author.should.equal(posts.author);
        });
    });
  });

  describe('POST endpoint', function() {
    // strategy: make a POST request with data,
    // then prove that the BlogPost we get back has
    // right keys, and that `id` is there (which means
    // the data was inserted into db)
    it('should add a new BlogPost', function() {

      const newBlogPost = generateBlogPostData();

      return chai.request(app)
        .post('/posts')
        .send(newBlogPost)
        .then(function(res) {
          res.should.have.status(201);
          res.should.be.json;
          res.body.should.be.a('object');
          res.body.should.include.keys(
            'id', 'created', 'author', 'content', 'title');
          res.body.title.should.equal(newBlogPost.title);
          // cause Mongo should have created id on insertion
          res.body.id.should.not.be.null;
          res.body.author.should.equal(`${newBlogPost.author.firstName} ${newBlogPost.author.lastName}`);
          res.body.content.should.equal(newBlogPost.content);
          return BlogPost.findById(res.body.id).exec();
        })
        .then(function(post) {
          post.title.should.equal(newBlogPost.title);
          post.content.should.equal(newBlogPost.content);
          post.author.firstName.should.equal(newBlogPost.author.firstName);
          post.author.lastName.should.equal(newBlogPost.author.lastName);
        });
    });
  });

  describe('PUT endpoint', function() {

    // strategy:
    //  1. Get an existing BlogPost from db
    //  2. Make a PUT request to update that BlogPost
    //  3. Prove BlogPost returned by request contains data we sent
    //  4. Prove BlogPost in db is correctly updated
    it('should update fields you send over', function() {
      const updateData = {
        content: 'fofofofofofofof',
        title: 'futuristic fusion',
        author: {firstName: 'IP', lastName: 'Freely'}
      };

      let post;

      return BlogPost
        .findOne()
        .exec()
        .then(function(post) {
          updateData.id = post.id;

          // make request then inspect it to make sure it reflects
          // data we sent
          return chai.request(app)
            .put(`/posts/${BlogPost.id}`)
            .send(updateData);
        })
        .then(function(res) {
          res.should.have.status(204);

          return BlogPost.findById(updateData.id).exec();
        })
        .then(function(BlogPost) {
          res.content.should.equal(updateData.content);
          res.title.should.equal(updateData.title);
          res.author.firstName.should.equal(updateData.author.firstName);          
          res.author.lastName.should.equal(updateData.author.lastName);          
        });
      });
  });

  describe('DELETE endpoint', function() {
    // strategy:
    //  1. get a BlogPost
    //  2. make a DELETE request for that BlogPost's id
    //  3. assert that response has right status code
    //  4. prove that BlogPost with the id doesn't exist in db anymore
    it('delete a BlogPost by id', function() {

      let post;

      return BlogPost
        .findOne()
        .exec()
        .then(function(post) {
          post = _post;
          return chai.request(app).delete(`/posts/${BlogPost.id}`);
        })
        .then(function(res) {
          res.should.have.status(204);
          return BlogPost.findById(post.id).exec();
        })
        .then(function(_post) {
          // when a variable's value is null, chaining `should`
          // doesn't work. so `_BlogPost.should.be.null` would raise
          // an error. `should.be.null(_BlogPost)` is how we can
          // make assertions about a null value.
          should.not.exist(_post);
        });
    });
  });
});
